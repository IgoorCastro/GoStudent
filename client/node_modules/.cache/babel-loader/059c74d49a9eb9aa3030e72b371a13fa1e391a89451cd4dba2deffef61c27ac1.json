{"ast":null,"code":"var _jsxFileName = \"K:\\\\4 Sem FATEC\\\\goStudent 3.0\\\\GoStudent\\\\client\\\\src\\\\components\\\\Calendario\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as C from './styles';\nimport Axios from 'axios';\nimport { useCalendarContext } from '../../context/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendario = () => {\n  _s();\n  const {\n    showTaskInfo,\n    listDataSelecionada,\n    setListData,\n    setData,\n    dataSelecionada\n  } = useCalendarContext();\n  setListData({});\n  // console.log(\"listDataSelecionada: \", listDataSelecionada);\n  // console.log(\"dataSelecionada: \", dataSelecionada);\n  // --------------------------------- States ---------------------------------\n\n  // Pega o dia/ mês atual do sistema\n  const [mesAtual, setMesAtual] = useState(new Date().getMonth() + 1);\n  const [anoAtual, setAnoAtual] = useState(new Date().getFullYear());\n  const [selectDate, setSelectDate] = useState(null);\n  const [colorControl, setColorControl] = useState({});\n  const [updateCalendar, setUpdateCalendar] = useState(null);\n\n  // --------------------------------- Variaveis estaticas de controle ---------------------------------\n  // Cores de selação da data\n  const selectDateColor = '#3282B8';\n  const currentDateColor = 'rgb(66, 135, 245, 0.4)';\n\n  // Array para controle do titulo\n  // Varia de acordo com o mesAtual\n  const nomesDosMeses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n  // --------------------------------- Funções de interação ---------------------------------\n\n  // Função do botão prixmo mês\n  const proximoMes = () => {\n    if (mesAtual === 12) {\n      //Verifica se o mês atual do calendario é Dezembro\n      setMesAtual(1); //Se for volta para o mês 1 e avança +1 no anoAtual\n      setAnoAtual(anoAtual + 1);\n    } else {\n      setMesAtual(mesAtual + 1);\n    }\n  };\n  // Função do botão prixmo mês\n  const mesAnterior = () => {\n    if (mesAtual === 1) {\n      //Verifica se o mês atual do calendario é Janeiro\n      setMesAtual(12); //Se for volta para o mês 12 e recua -1 no anoAtual\n      setAnoAtual(anoAtual - 1);\n    } else {\n      setMesAtual(mesAtual - 1);\n    }\n  };\n\n  // Função para lidar com a seleção de um dia\n  const handleSelecionarDia = (dia, mes, ano) => {\n    //console.log(\"handleSelecionarDia: \", ano + \"/\" + mes + \"/\" + dia);\n    setSelectDate({\n      dia,\n      mes,\n      ano\n    });\n    setData(ano + \"/\" + mes + \"/\" + dia);\n    //console.log(\"selectDate: \", selectDate);\n\n    Axios.get(\"http://localhost:3001/getDateData\", {\n      params: {\n        date: ano + \"/\" + mes + \"/\" + dia\n      }\n    }).then(response => {\n      setListData(response.data);\n      //console.log(\"response: \", response);\n    });\n  };\n\n  const helpRequest = () => {\n    alert(\"Desenvolver pagina de ajuda\");\n  };\n\n  // --------------------------------- Funções principais ---------------------------------\n  // Função responsavel por retornar a quantidade de dias de um determinado (ano, mês) sendo passado por parametro\n  // Cada mês tem sua quantidade de dias\n  const getDaysInMonth = (year, month) => {\n    const date = new Date(year, month - 1, 1); //Pega o primeiro dia do mes (ex: 1/9/2023 : outubro)\n    date.setMonth(date.getMonth() + 1); //Avança um mês (soma + 1 no mês, ex: 1/10/2023)\n    date.setDate(date.getDate() - 1); //Volta um dia para pegar o ultimo dia do mes (ex: 31/9/2023)\n    return date.getDate(); // Retorna apenas o dia\n  };\n\n  // Variaveis de controle de calendario\n  const numeroDeDias = getDaysInMonth(anoAtual, mesAtual); // Chama a função getDaysInMonth para pegar quantos dias a no mês\n  const primeiroDiaSemana = new Date(anoAtual, mesAtual - 1, 1).getDay(); // Armazena o dia da semana em que o mês começa (0 para domingo, 1 para segunda, etc.).\n  const linhas = Math.ceil((numeroDeDias + primeiroDiaSemana) / 7); // Calcula a quantidade de linhas para o calendario (ex: numeroDeDias=30 + primeiroDiaSemana=4 / 7'dias da semana')\n\n  // Função que verifica se o dia atual é igual ao dia que está sendo montado no calendario\n  const isDiaAtual = dia => {\n    const dataAtual = new Date(); // Pega o calendario do sistema\n    const diaAtual = dataAtual.getDate(); // Pega o dia atual do calendario\n    const mesAtualSelecionado = dataAtual.getMonth() + 1; // Pega o mês atual do sistema\n    return dia === diaAtual && mesAtual === mesAtualSelecionado; // Compara o dia que está sendo montado com o dia atual, mesma coisa para o mes (retorna um boolean)\n  };\n\n  // Função para criar um array bidimensional para representar os dias do calendario\n  const criarArrayDeDias = () => {\n    const dias = []; // Array que vai armazenar os dias do calendario\n    for (let linha = 0; linha < linhas; linha++) {\n      // Loop para percorrer as linhas do calendario calculada anteriormente (Quntidade de semanas do mês)\n      const semana = []; // Para cada linha, criamos um array vazio para representar os dias dessa semana\n      for (let diaDaSemana = 0; diaDaSemana < 7; diaDaSemana++) {\n        // Loop para percorrer os dias da semana (0 a 6, representando domingo a sábado)\n        const dia = linha * 7 + diaDaSemana - primeiroDiaSemana + 1; // Calculo do valor do dia atual (pode ser um valor positivo representando o dia do mês, ou null se estivermos antes do início do mês ou após o final do mês)\n        semana.push(dia > 0 && dia <= numeroDeDias ? dia : null); // Monta o array com os dias calculados (de domingo a sabado) \n      }\n\n      dias.push(semana);\n      // Monta o array dia com os dias da array da semana  ex: \n      // [null, null, 1, 2, 3, 4, 5], // Primeira semana\n      // [6, 7, 8, 9, 10, 11, 12],   // Segunda semana\n      // [13, 14, 15, 16, 17, 18, 19],  // Terceira semana\n      // [20, 21, 22, 23, 24, 25, 26],  // Quarta semana\n      // [27, 28, 29, 30, null, null, null]  // Quinta semana)\n    }\n\n    return dias;\n  };\n  const getCalendarColorControl = () => {\n    Axios.get(\"http://localhost:3001/testData\", {}).then(response => {\n      setColorControl(response.data);\n    });\n  };\n  useEffect(() => {\n    // // Verificar se a data que está chegando no parametro está cadastrada no banco\n    // // Data sendo escrita no calendario e para pesquisa no db\n    // let data = null;\n    console.log(\"Effect\");\n    // if(dia)\n    //     data = ano + '/' + mes + '/' + dia;\n    getCalendarColorControl();\n    //alert(\"EFFECT\");\n\n    //const listLenght = listData.length;\n\n    let dataTest = '30/11/2023'; // Data deve ter 2 registros\n    let testRegistros = 2; // Valor de teste reprensentando a quantidade de registros da 'data' no Db\n\n    // Verifica se há algum registro no Db\n    //let registros = data === dataTest ? testRegistros : null;\n  }, [updateCalendar]);\n  const calendarColorControl = (dia, mes, ano) => {\n    //Checar no banco se há registros nesse dia\n    let repeatedDaysCount = 0;\n    const dataAtual = dia ? dia + \"/\" + mes + \"/\" + ano : null;\n\n    // console.log(\"colorControl\", colorControl);\n    // console.log(\"dataAtual\", dataAtual);\n    console.log(\"colorControl\", colorControl);\n    let updatedColorControl = [...colorControl]; // Cria uma cópia do estado colorControl\n    if (updatedColorControl && dataAtual) {\n      for (let i = 0; i <= updatedColorControl.length - 1; i++) {\n        console.log(\"updatedColorControl: \", convertDate(updatedColorControl[i].eve_dataHora));\n        console.log(\"dataAtual: \", dataAtual);\n        if (convertDate(updatedColorControl[i].eve_dataHora) === dataAtual) {\n          console.log(\"true\");\n          repeatedDaysCount++;\n          // Remover item do colorControl\n          // const updateArray = colorControl.splice(i, 1);\n          // setColorControl(updateArray);\n          colorControl.splice(i, 1);\n        }\n      }\n      console.log(repeatedDaysCount);\n    }\n    let color = 'rgb(242, 41, 59';\n    switch (repeatedDaysCount) {\n      case 1:\n        return {\n          background: color + ', 0.6)'\n        };\n      case 2:\n        return {\n          background: color + ', 0.7)'\n        };\n      case 3:\n        return {\n          background: color + ', 0.8)'\n        };\n      case 4:\n        return {\n          background: color + ', 0.9)'\n        };\n      default:\n        return {};\n    }\n  };\n  const convertDate = date => {\n    let data = \"\";\n    if (typeof date === 'object') {\n      const {\n        dia,\n        mes,\n        ano\n      } = date;\n      data = new Date(`${ano}/${mes}/${dia}`);\n    } else data = new Date(date);\n    const dia = data.getDate(); // Obter o ano como dia\n    const mes = data.getMonth() + 1; // Mês (lembrando que Janeiro começa do zero)\n    const ano = data.getFullYear(); // Obter o dia como ano\n\n    // Formatar para o padrão dd/mm/yyyy\n    const dataString = `${dia}/${mes}/${ano}`;\n\n    //console.log(\"convertDate: \" + dataString);\n    return dataString;\n  };\n  const handlePreviousMonth = () => {\n    mesAnterior();\n    setUpdateCalendar(prevState => prevState + 1);\n    // getCalendarColorControl();        \n  };\n\n  const handleNextMonth = () => {\n    proximoMes();\n    setUpdateCalendar(prevState => prevState + 1);\n    // getCalendarColorControl();\n  };\n\n  return /*#__PURE__*/_jsxDEV(C.MainContent, {\n    children: /*#__PURE__*/_jsxDEV(C.CalendarioContainer, {\n      children: [/*#__PURE__*/_jsxDEV(C.TitleContent, {\n        children: [/*#__PURE__*/_jsxDEV(C.Button, {\n          position: \"left\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(C.Title, {\n          children: `${nomesDosMeses[mesAtual - 1]}  ${anoAtual}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(C.Button, {\n          position: \"right\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTable, {\n        children: [/*#__PURE__*/_jsxDEV(C.CalendarioThread, {\n          children: /*#__PURE__*/_jsxDEV(C.CalendarioTr, {\n            children: [/*#__PURE__*/_jsxDEV(C.CalendarioTd, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Dom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTd, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Seg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTd, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Ter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTd, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Qua\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTd, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Qui\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTd, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Sex\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTd, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Sab\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTBody, {\n          children: criarArrayDeDias().map((semana, index) => /*#__PURE__*/_jsxDEV(C.CalendarioTr, {\n            children: semana.map((dia, index) => /*#__PURE__*/_jsxDEV(C.CalendarioTd, {\n              onDoubleClick: () => {\n                if (listDataSelecionada && convertDate(selectDate) === convertDate(listDataSelecionada[0].eve_dataHora)) showTaskInfo();\n              },\n              onClick: () => {\n                if (dia !== null) {\n                  handleSelecionarDia(dia, mesAtual, anoAtual);\n                  //setUpdateCalendar(prevState => prevState + 1);\n                }\n              },\n\n              style: {\n                ...(dia === null ? {\n                  cursor: 'default'\n                } : {})\n              },\n              children: /*#__PURE__*/_jsxDEV(C.RadiusContent, {\n                day: dia,\n                style: {\n                  // Data atual\n                  ...(dia !== null && isDiaAtual(dia) ? {\n                    background: currentDateColor,\n                    border: '1px solid #fff'\n                  } : {}),\n                  // Controle de cores de acordo com a quantidade de atv cadastradas \n                  ...calendarColorControl(dia, mesAtual, anoAtual),\n                  // Data selecionada\n                  ...(selectDate && dia === selectDate.dia && mesAtual === selectDate.mes && anoAtual === selectDate.ano ? {\n                    background: selectDateColor,\n                    border: '1px solid #fff',\n                    color: '#E7E7E7'\n                  } : {})\n                },\n                children: dia !== null ? dia : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 41\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 37\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 9\n  }, this);\n};\n_s(Calendario, \"uRVy0ZUIkI/ezvJzNipYiclLOv0=\", false, function () {\n  return [useCalendarContext];\n});\n_c = Calendario;\nexport default Calendario;\nvar _c;\n$RefreshReg$(_c, \"Calendario\");","map":{"version":3,"names":["React","useState","useEffect","C","Axios","useCalendarContext","jsxDEV","_jsxDEV","Calendario","_s","showTaskInfo","listDataSelecionada","setListData","setData","dataSelecionada","mesAtual","setMesAtual","Date","getMonth","anoAtual","setAnoAtual","getFullYear","selectDate","setSelectDate","colorControl","setColorControl","updateCalendar","setUpdateCalendar","selectDateColor","currentDateColor","nomesDosMeses","proximoMes","mesAnterior","handleSelecionarDia","dia","mes","ano","get","params","date","then","response","data","helpRequest","alert","getDaysInMonth","year","month","setMonth","setDate","getDate","numeroDeDias","primeiroDiaSemana","getDay","linhas","Math","ceil","isDiaAtual","dataAtual","diaAtual","mesAtualSelecionado","criarArrayDeDias","dias","linha","semana","diaDaSemana","push","getCalendarColorControl","console","log","dataTest","testRegistros","calendarColorControl","repeatedDaysCount","updatedColorControl","i","length","convertDate","eve_dataHora","splice","color","background","dataString","handlePreviousMonth","prevState","handleNextMonth","MainContent","children","CalendarioContainer","TitleContent","Button","position","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Title","CalendarioTable","CalendarioThread","CalendarioTr","CalendarioTd","style","cursor","CalendarioTBody","map","index","onDoubleClick","RadiusContent","day","border","_c","$RefreshReg$"],"sources":["K:/4 Sem FATEC/goStudent 3.0/GoStudent/client/src/components/Calendario/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as C from './styles';\r\nimport Axios from 'axios';\r\nimport { useCalendarContext } from '../../context/DataContext';\r\n\r\nconst Calendario = () => {\r\n    const { showTaskInfo, listDataSelecionada, setListData, setData, dataSelecionada } = useCalendarContext();\r\n    setListData({});\r\n    // console.log(\"listDataSelecionada: \", listDataSelecionada);\r\n    // console.log(\"dataSelecionada: \", dataSelecionada);\r\n    // --------------------------------- States ---------------------------------\r\n\r\n    // Pega o dia/ mês atual do sistema\r\n    const [mesAtual, setMesAtual] = useState(new Date().getMonth() + 1);\r\n    const [anoAtual, setAnoAtual] = useState(new Date().getFullYear());\r\n    const [selectDate, setSelectDate] = useState(null);\r\n    const [colorControl, setColorControl] = useState({});\r\n    const [updateCalendar, setUpdateCalendar] = useState(null);\r\n\r\n    // --------------------------------- Variaveis estaticas de controle ---------------------------------\r\n    // Cores de selação da data\r\n    const selectDateColor = '#3282B8';\r\n    const currentDateColor = 'rgb(66, 135, 245, 0.4)';\r\n\r\n    // Array para controle do titulo\r\n    // Varia de acordo com o mesAtual\r\n    const nomesDosMeses = [\r\n        'Janeiro',\r\n        'Fevereiro',\r\n        'Março',\r\n        'Abril',\r\n        'Maio',\r\n        'Junho',\r\n        'Julho',\r\n        'Agosto',\r\n        'Setembro',\r\n        'Outubro',\r\n        'Novembro',\r\n        'Dezembro',\r\n    ];\r\n    // --------------------------------- Funções de interação ---------------------------------\r\n\r\n    // Função do botão prixmo mês\r\n    const proximoMes = () => {\r\n        if (mesAtual === 12) { //Verifica se o mês atual do calendario é Dezembro\r\n            setMesAtual(1); //Se for volta para o mês 1 e avança +1 no anoAtual\r\n            setAnoAtual(anoAtual + 1);\r\n        } else {\r\n            setMesAtual(mesAtual + 1);\r\n        }\r\n    };\r\n    // Função do botão prixmo mês\r\n    const mesAnterior = () => {\r\n        if (mesAtual === 1) { //Verifica se o mês atual do calendario é Janeiro\r\n            setMesAtual(12); //Se for volta para o mês 12 e recua -1 no anoAtual\r\n            setAnoAtual(anoAtual - 1);\r\n        } else {\r\n            setMesAtual(mesAtual - 1);\r\n        }\r\n    };\r\n\r\n    // Função para lidar com a seleção de um dia\r\n    const handleSelecionarDia = (dia, mes, ano) => {\r\n        //console.log(\"handleSelecionarDia: \", ano + \"/\" + mes + \"/\" + dia);\r\n        setSelectDate({ dia, mes, ano });\r\n        setData(ano + \"/\" + mes + \"/\" + dia);\r\n        //console.log(\"selectDate: \", selectDate);\r\n\r\n        Axios.get(\"http://localhost:3001/getDateData\", {\r\n            params: {\r\n                date: ano + \"/\" + mes + \"/\" + dia,\r\n            }\r\n        }).then((response) => {\r\n            setListData(response.data);\r\n            //console.log(\"response: \", response);\r\n        });\r\n\r\n    };\r\n\r\n    const helpRequest = () => {\r\n        alert(\"Desenvolver pagina de ajuda\")\r\n    }\r\n\r\n    // --------------------------------- Funções principais ---------------------------------\r\n    // Função responsavel por retornar a quantidade de dias de um determinado (ano, mês) sendo passado por parametro\r\n    // Cada mês tem sua quantidade de dias\r\n    const getDaysInMonth = (year, month) => {\r\n        const date = new Date(year, month - 1, 1); //Pega o primeiro dia do mes (ex: 1/9/2023 : outubro)\r\n        date.setMonth(date.getMonth() + 1); //Avança um mês (soma + 1 no mês, ex: 1/10/2023)\r\n        date.setDate(date.getDate() - 1); //Volta um dia para pegar o ultimo dia do mes (ex: 31/9/2023)\r\n        return date.getDate(); // Retorna apenas o dia\r\n    };\r\n\r\n    // Variaveis de controle de calendario\r\n    const numeroDeDias = getDaysInMonth(anoAtual, mesAtual); // Chama a função getDaysInMonth para pegar quantos dias a no mês\r\n    const primeiroDiaSemana = new Date(anoAtual, mesAtual - 1, 1).getDay(); // Armazena o dia da semana em que o mês começa (0 para domingo, 1 para segunda, etc.).\r\n    const linhas = Math.ceil((numeroDeDias + primeiroDiaSemana) / 7); // Calcula a quantidade de linhas para o calendario (ex: numeroDeDias=30 + primeiroDiaSemana=4 / 7'dias da semana')\r\n\r\n    // Função que verifica se o dia atual é igual ao dia que está sendo montado no calendario\r\n    const isDiaAtual = (dia) => {\r\n        const dataAtual = new Date(); // Pega o calendario do sistema\r\n        const diaAtual = dataAtual.getDate(); // Pega o dia atual do calendario\r\n        const mesAtualSelecionado = dataAtual.getMonth() + 1; // Pega o mês atual do sistema\r\n        return dia === diaAtual && mesAtual === mesAtualSelecionado; // Compara o dia que está sendo montado com o dia atual, mesma coisa para o mes (retorna um boolean)\r\n    };\r\n\r\n    // Função para criar um array bidimensional para representar os dias do calendario\r\n    const criarArrayDeDias = () => {\r\n        const dias = []; // Array que vai armazenar os dias do calendario\r\n        for (let linha = 0; linha < linhas; linha++) { // Loop para percorrer as linhas do calendario calculada anteriormente (Quntidade de semanas do mês)\r\n            const semana = []; // Para cada linha, criamos um array vazio para representar os dias dessa semana\r\n            for (let diaDaSemana = 0; diaDaSemana < 7; diaDaSemana++) { // Loop para percorrer os dias da semana (0 a 6, representando domingo a sábado)\r\n                const dia = linha * 7 + diaDaSemana - primeiroDiaSemana + 1; // Calculo do valor do dia atual (pode ser um valor positivo representando o dia do mês, ou null se estivermos antes do início do mês ou após o final do mês)\r\n                semana.push(dia > 0 && dia <= numeroDeDias ? dia : null); // Monta o array com os dias calculados (de domingo a sabado) \r\n            }\r\n            dias.push(semana);\r\n            // Monta o array dia com os dias da array da semana  ex: \r\n            // [null, null, 1, 2, 3, 4, 5], // Primeira semana\r\n            // [6, 7, 8, 9, 10, 11, 12],   // Segunda semana\r\n            // [13, 14, 15, 16, 17, 18, 19],  // Terceira semana\r\n            // [20, 21, 22, 23, 24, 25, 26],  // Quarta semana\r\n            // [27, 28, 29, 30, null, null, null]  // Quinta semana)\r\n        }\r\n        return dias;\r\n    };\r\n\r\n    const getCalendarColorControl = () => {\r\n        Axios.get(\"http://localhost:3001/testData\", {\r\n        }).then((response) => {\r\n            setColorControl(response.data);\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        // // Verificar se a data que está chegando no parametro está cadastrada no banco\r\n        // // Data sendo escrita no calendario e para pesquisa no db\r\n        // let data = null;\r\n        console.log(\"Effect\");\r\n        // if(dia)\r\n        //     data = ano + '/' + mes + '/' + dia;\r\n        getCalendarColorControl();\r\n        //alert(\"EFFECT\");\r\n\r\n\r\n        //const listLenght = listData.length;\r\n\r\n        let dataTest = '30/11/2023'; // Data deve ter 2 registros\r\n        let testRegistros = 2; // Valor de teste reprensentando a quantidade de registros da 'data' no Db\r\n\r\n        // Verifica se há algum registro no Db\r\n        //let registros = data === dataTest ? testRegistros : null;\r\n\r\n    }, [updateCalendar]);\r\n\r\n    const calendarColorControl = (dia, mes, ano) => {\r\n        //Checar no banco se há registros nesse dia\r\n        let repeatedDaysCount = 0;\r\n        const dataAtual = dia ? dia + \"/\" + mes + \"/\" + ano : null;\r\n\r\n        // console.log(\"colorControl\", colorControl);\r\n        // console.log(\"dataAtual\", dataAtual);\r\n        console.log(\"colorControl\", colorControl);\r\n        let updatedColorControl = [...colorControl]; // Cria uma cópia do estado colorControl\r\n        if (updatedColorControl && dataAtual) {\r\n            for (let i = 0; i <= updatedColorControl.length - 1; i++) {\r\n                console.log(\"updatedColorControl: \", convertDate(updatedColorControl[i].eve_dataHora));\r\n                console.log(\"dataAtual: \", dataAtual);\r\n                if (convertDate(updatedColorControl[i].eve_dataHora) === dataAtual) {\r\n                    console.log(\"true\");\r\n                    repeatedDaysCount++;\r\n                    // Remover item do colorControl\r\n                    // const updateArray = colorControl.splice(i, 1);\r\n                    // setColorControl(updateArray);\r\n                    colorControl.splice(i, 1);\r\n                }\r\n            }\r\n            console.log(repeatedDaysCount);\r\n        }\r\n        let color = 'rgb(242, 41, 59';\r\n        switch (repeatedDaysCount) {\r\n            case 1:\r\n                return { background: color + ', 0.6)' };\r\n            case 2:\r\n                return { background: color + ', 0.7)' };\r\n            case 3:\r\n                return { background: color + ', 0.8)' };\r\n            case 4:\r\n                return { background: color + ', 0.9)' };\r\n            default:\r\n                return {};\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const convertDate = (date) => {\r\n        let data = \"\";\r\n\r\n        if (typeof date === 'object') {\r\n            const { dia, mes, ano } = date;\r\n            data = new Date(`${ano}/${mes}/${dia}`);\r\n\r\n        } else\r\n            data = new Date(date);\r\n\r\n        const dia = data.getDate(); // Obter o ano como dia\r\n        const mes = data.getMonth() + 1; // Mês (lembrando que Janeiro começa do zero)\r\n        const ano = data.getFullYear(); // Obter o dia como ano\r\n\r\n        // Formatar para o padrão dd/mm/yyyy\r\n        const dataString = `${dia}/${mes}/${ano}`;\r\n\r\n        //console.log(\"convertDate: \" + dataString);\r\n        return dataString;\r\n    }\r\n\r\n    const handlePreviousMonth = () => {\r\n        mesAnterior();\r\n        setUpdateCalendar(prevState => prevState + 1);\r\n        // getCalendarColorControl();        \r\n    }\r\n\r\n    const handleNextMonth = () => {\r\n        proximoMes();\r\n        setUpdateCalendar(prevState => prevState + 1);\r\n        // getCalendarColorControl();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <C.MainContent>\r\n            <C.CalendarioContainer>\r\n                <C.TitleContent>\r\n                    <C.Button position='left' onClick={handlePreviousMonth}>&lt;</C.Button>\r\n                    <C.Title>{`${nomesDosMeses[mesAtual - 1]}  ${anoAtual}`}</C.Title>\r\n                    <C.Button position='right' onClick={handleNextMonth}>&gt;</C.Button>\r\n                </C.TitleContent>\r\n                <C.CalendarioTable>\r\n                    <C.CalendarioThread>\r\n                        <C.CalendarioTr>\r\n                            <C.CalendarioTd style={{ cursor: 'default' }}>Dom</C.CalendarioTd>\r\n                            <C.CalendarioTd style={{ cursor: 'default' }}>Seg</C.CalendarioTd>\r\n                            <C.CalendarioTd style={{ cursor: 'default' }}>Ter</C.CalendarioTd>\r\n                            <C.CalendarioTd style={{ cursor: 'default' }}>Qua</C.CalendarioTd>\r\n                            <C.CalendarioTd style={{ cursor: 'default' }}>Qui</C.CalendarioTd>\r\n                            <C.CalendarioTd style={{ cursor: 'default' }}>Sex</C.CalendarioTd>\r\n                            <C.CalendarioTd style={{ cursor: 'default' }}>Sab</C.CalendarioTd>\r\n                        </C.CalendarioTr>\r\n                    </C.CalendarioThread>\r\n                    <C.CalendarioTBody>\r\n                        {criarArrayDeDias().map((semana, index) => (\r\n                            <C.CalendarioTr key={index}>\r\n                                {semana.map((dia, index) => (\r\n                                    <C.CalendarioTd\r\n                                        key={index}\r\n                                        onDoubleClick={() => {\r\n                                            if (listDataSelecionada && convertDate(selectDate) === convertDate(listDataSelecionada[0].eve_dataHora))\r\n                                                showTaskInfo();\r\n                                        }}\r\n                                        onClick={() => {\r\n                                            if (dia !== null) {\r\n                                                handleSelecionarDia(dia, mesAtual, anoAtual);\r\n                                                //setUpdateCalendar(prevState => prevState + 1);\r\n                                            }\r\n                                        }}\r\n                                        style={{\r\n                                            ...dia === null ? { cursor: 'default' } : {}\r\n                                        }}\r\n                                    >\r\n                                        <C.RadiusContent\r\n                                            day={dia}\r\n                                            style={{\r\n                                                // Data atual\r\n                                                ...dia !== null && isDiaAtual(dia) ? { background: currentDateColor, border: '1px solid #fff' } : {},\r\n                                                // Controle de cores de acordo com a quantidade de atv cadastradas \r\n                                                ...calendarColorControl(dia, mesAtual, anoAtual),\r\n                                                // Data selecionada\r\n                                                ...(selectDate && dia === selectDate.dia && mesAtual === selectDate.mes && anoAtual === selectDate.ano\r\n                                                    ? { background: selectDateColor, border: '1px solid #fff', color: '#E7E7E7' } : {})\r\n                                            }}>\r\n                                            {dia !== null ? dia : ''}\r\n                                        </C.RadiusContent>\r\n                                    </C.CalendarioTd>\r\n                                ))}\r\n                            </C.CalendarioTr>\r\n                        ))}\r\n                    </C.CalendarioTBody>\r\n                </C.CalendarioTable>\r\n            </C.CalendarioContainer>\r\n        </C.MainContent>\r\n    );\r\n};\r\n\r\nexport default Calendario;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}