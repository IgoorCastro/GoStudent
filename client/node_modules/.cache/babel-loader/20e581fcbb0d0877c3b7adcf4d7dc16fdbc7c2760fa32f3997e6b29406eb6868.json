{"ast":null,"code":"var _jsxFileName = \"K:\\\\4 Sem FATEC\\\\goStudent 3.0\\\\GoStudent\\\\client\\\\src\\\\components\\\\Calendario\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as C from './styles';\nimport Axios from 'axios';\nimport { useCalendarContext } from '../../context/DataContext';\nimport Title from '../Title';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendario = () => {\n  _s();\n  const {\n    showTaskInfo,\n    showAddTask,\n    listDataSelecionada,\n    setListData,\n    setData,\n    setCalendarUpdt,\n    updateCalendar,\n    closeTaskAdd,\n    setCurrentColor,\n    setCurrentIndx\n  } = useCalendarContext();\n  //setListData({});\n  // console.log(\"listDataSelecionada: \", listDataSelecionada);\n  // console.log(\"dataSelecionada: \", dataSelecionada);\n  // --------------------------------- States ---------------------------------\n\n  // Pega o dia/ mês atual do sistema\n  const [mesAtual, setMesAtual] = useState(new Date().getMonth() + 1);\n  const [anoAtual, setAnoAtual] = useState(new Date().getFullYear());\n  const [selectDate, setSelectDate] = useState(null);\n  const [colorControl, setColorControl] = useState({});\n  const [qntSemanas, setQntSemanas] = useState(null);\n\n  // controle da datas\n  const [dataSistema, setDataSistema] = useState(new Date());\n  const [dataAtual, setDataAtual] = useState(new Date());\n  //console.log(\"qntSemanas: \", qntSemanas);\n\n  useEffect(() => {\n    getCalendarColorControl();\n  }, [updateCalendar]);\n\n  // effect para pegar a quantidade de semanas do mês exibido\n  useEffect(() => {\n    // pega a quantidade de dias do mes/ ano exibido\n    const numeroDeDias = getDaysInMonth(anoAtual, mesAtual);\n\n    // indica em qual dia da semana o primeiro dia do mês cai (0 para domingo, 1 para segunda-feira, e assim por diante).\n    const primeiroDiaSemana = new Date(anoAtual, mesAtual - 1, 1).getDay();\n\n    // numero de semanas do mes atual\n    const linhas = Math.ceil((numeroDeDias + primeiroDiaSemana) / 7);\n    setQntSemanas(linhas);\n  }, [anoAtual, mesAtual]);\n\n  // --------------------------------- Variaveis estaticas de controle ---------------------------------\n  // Cores de selação da data\n  const selectDateColor = '#3282B8';\n  const currentDateColor = 'rgb(66, 135, 245, 0.4)';\n\n  // Array para controle do titulo\n  // Varia de acordo com o mesAtual\n  const nomesDosMeses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n  // --------------------------------- Funções de interação ---------------------------------\n\n  // Função do botão prixmo mês\n  const proximoMes = () => {\n    if (mesAtual === 12) {\n      //Verifica se o mês atual do calendario é Dezembro\n      setMesAtual(1); //Se for volta para o mês 1 e avança +1 no anoAtual\n      setAnoAtual(anoAtual + 1);\n    } else {\n      setMesAtual(mesAtual + 1);\n    }\n  };\n  // Função do botão prixmo mês\n  const mesAnterior = () => {\n    if (mesAtual === 1) {\n      //Verifica se o mês atual do calendario é Janeiro\n      setMesAtual(12); //Se for volta para o mês 12 e recua -1 no anoAtual\n      setAnoAtual(anoAtual - 1);\n    } else {\n      setMesAtual(mesAtual - 1);\n    }\n  };\n\n  // Função para lidar com a seleção de um dia\n  const handleSelecionarDia = (dia, mes, ano) => {\n    return new Promise((resolve, reject) => {\n      setSelectDate({\n        dia,\n        mes,\n        ano\n      });\n      setData(`${ano}/${mes}/${dia}`);\n      Axios.get(\"http://localhost:3001/getDateData\", {\n        params: {\n          date: `${ano}/${mes}/${dia}`\n        }\n      }).then(response => {\n        setListData(response.data);\n        resolve(); // Resolvendo a Promise após setListData ser executado\n      }).catch(e => {\n        // tratamento de erro 'requests, response e configuração'\n        if (e.response) {\n          console.error(\"--erro status:\", e.response.status);\n          console.error(\"--dados do erro:\", e.response.data);\n        } else if (e.request) {\n          // requisição feita, mas não houve resposta do servidor\n          console.log(\"Sem resposta do servidor:\", e.request);\n        } else {\n          // erro ao configurar a requisição\n          console.error(\"--erro requisição:\", e.message);\n        }\n        reject(e); // Rejeitando a Promise em caso de erro na requisição\n      });\n    });\n  };\n\n  const helpRequest = () => {\n    alert(\"Desenvolver pagina de ajuda\");\n  };\n\n  // --------------------------------- Funções principais ---------------------------------\n  // Função responsavel por retornar a quantidade de dias de um determinado (ano, mês) sendo passado por parametro\n  // Cada mês tem sua quantidade de dias\n  const getDaysInMonth = (ano, mes) => {\n    const date = new Date(ano, mes - 1, 1); //Pega o primeiro dia do mes (ex: 1/9/2023 : outubro)\n    date.setMonth(date.getMonth() + 1); //Avança um mês (soma + 1 no mês, ex: 1/10/2023)\n    date.setDate(date.getDate() - 1); //Volta um dia para pegar o ultimo dia do mes (ex: 31/9/2023)\n    return date.getDate(); // Retorna apenas o dia\n  };\n\n  // Variaveis de controle de calendario\n  const numeroDeDias = getDaysInMonth(anoAtual, mesAtual); // Chama a função getDaysInMonth para pegar quantos dias a no mês\n  const primeiroDiaSemana = new Date(anoAtual, mesAtual - 1, 1).getDay(); // Armazena o dia da semana em que o mês começa (0 para domingo, 1 para segunda, etc.).\n  const linhas = Math.ceil((numeroDeDias + primeiroDiaSemana) / 7); // Calcula a quantidade de linhas para o calendario (ex: numeroDeDias=30 + primeiroDiaSemana=4 / 7'dias da semana')\n\n  // Função que verifica se o dia atual é igual ao dia que está sendo montado no calendario\n  const isDiaAtual = dia => {\n    const dataAtual = new Date(); // Pega o calendario do sistema\n    const diaAtual = dataAtual.getDate(); // Pega o dia atual do calendario\n    const mesAtualSelecionado = dataAtual.getMonth() + 1; // Pega o mês atual do sistema\n    return dia === diaAtual && mesAtual === mesAtualSelecionado; // Compara o dia que está sendo montado com o dia atual, mesma coisa para o mes (retorna um boolean)\n  };\n\n  // Função para criar um array bidimensional para representar os dias do calendario    \n  const criarArrayDeDias = () => {\n    const dias = []; // Array que vai armazenar os dias do calendario\n    for (let linha = 0; linha < linhas; linha++) {\n      // Loop para percorrer as linhas do calendario calculada anteriormente (Quntidade de semanas do mês)\n      const semana = []; // Para cada linha, criamos um array vazio para representar os dias dessa semana\n      for (let diaDaSemana = 0; diaDaSemana < 7; diaDaSemana++) {\n        // Loop para percorrer os dias da semana (0 a 6, representando domingo a sábado)\n        const dia = linha * 7 + diaDaSemana - primeiroDiaSemana + 1; // Calculo do valor do dia atual (pode ser um valor positivo representando o dia do mês, ou null se estivermos antes do início do mês ou após o final do mês)\n        semana.push(dia > 0 && dia <= numeroDeDias ? dia : null); // Monta o array com os dias calculados (de domingo a sabado) \n      }\n\n      dias.push(semana);\n      // Monta o array dia com os dias da array da semana  ex: \n      // [null, null, 1, 2, 3, 4, 5], // Primeira semana\n      // [6, 7, 8, 9, 10, 11, 12],   // Segunda semana\n      // [13, 14, 15, 16, 17, 18, 19],  // Terceira semana\n      // [20, 21, 22, 23, 24, 25, 26],  // Quarta semana\n      // [27, 28, 29, 30, null, null, null]  // Quinta semana)            \n    }\n\n    return dias;\n  };\n  const getCalendarColorControl = () => {\n    Axios.get(\"http://localhost:3001/testData\", {}).then(response => {\n      setColorControl(response.data);\n    }).catch(e => {\n      // tratamento de erro 'requests, response e configuração'\n      if (e.response) {\n        console.error(\"--erro status:\", e.response.status);\n        console.error(\"--dados do erro:\", e.response.data);\n      } else if (e.request) {\n        // requisição feita, mas não houve resposta do servidor\n        console.log(\"Sem resposta do servidor:\", e.request);\n      } else {\n        // erro ao configurar a requisição\n        console.error(\"--erro requisição:\", e.message);\n      }\n    });\n  };\n  const calendarColorControl = (dia, mes, ano) => {\n    let repeatedDaysCount = 0;\n    const dataAtual = dia ? dia + \"/\" + mes + \"/\" + ano : null;\n\n    // Verificar se se colorControl recebeu retorno do banco e seu length é > 0\n    if (colorControl.length > 0 && dataAtual) {\n      let updatedColorControl = [...colorControl]; // Cria uma cópia do estado colorControl\n\n      // Laço para ver quantas vezes a data se repete no retorno do banco\n      for (let i = 0; i <= updatedColorControl.length - 1; i++) {\n        if (convertDate(updatedColorControl[i].eve_dataHora) === dataAtual) {\n          repeatedDaysCount++;\n          updatedColorControl.splice(i, 1);\n          i--;\n        }\n      }\n    }\n    return calendarColorGenerator(repeatedDaysCount);\n  };\n  const calendarColorGenerator = repeatedDaysCount => {\n    let color = 'rgb(242, 41, 59';\n    switch (repeatedDaysCount) {\n      case 1:\n        return {\n          background: color + ', 0.2)'\n        };\n      case 2:\n        return {\n          background: color + ', 0.5)'\n        };\n      case 3:\n        return {\n          background: color + ', 0.7)'\n        };\n      default:\n        return repeatedDaysCount < 1 ? {} : {\n          background: color + ', 0.9)'\n        };\n    }\n  };\n  const convertDate = date => {\n    let data = \"\";\n    if (typeof date === 'object') {\n      const {\n        dia,\n        mes,\n        ano\n      } = date;\n      data = new Date(`${ano}/${mes}/${dia}`);\n    } else data = new Date(date);\n    const dia = data.getDate(); // Obter o ano como dia\n    const mes = data.getMonth() + 1; // Mês (lembrando que Janeiro começa do zero)\n    const ano = data.getFullYear(); // Obter o dia como ano\n\n    // Formatar para o padrão dd/mm/yyyy\n    const dataString = `${dia}/${mes}/${ano}`;\n\n    //console.log(\"convertDate: \" + dataString);\n    return dataString;\n  };\n  const handlePreviousMonth = () => {\n    mesAnterior();\n    setCalendarUpdt();\n    // getCalendarColorControl();        \n  };\n\n  const handleNextMonth = () => {\n    proximoMes();\n    setCalendarUpdt();\n    // getCalendarColorControl();\n  };\n\n  return /*#__PURE__*/_jsxDEV(C.MainContent, {\n    children: /*#__PURE__*/_jsxDEV(C.CalendarioContainer, {\n      children: [/*#__PURE__*/_jsxDEV(C.TitleContent, {\n        children: [/*#__PURE__*/_jsxDEV(C.Button, {\n          position: \"left\",\n          onClick: handlePreviousMonth,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(C.Title, {\n          children: `${nomesDosMeses[mesAtual - 1]}  ${anoAtual}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(C.Button, {\n          position: \"right\",\n          onClick: handleNextMonth,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTable, {\n        children: [/*#__PURE__*/_jsxDEV(C.CalendarioThread, {\n          children: /*#__PURE__*/_jsxDEV(C.CalendarioTr, {\n            children: [/*#__PURE__*/_jsxDEV(C.CalendarioTdWeekly, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Dom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTdWeekly, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Seg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTdWeekly, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Ter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTdWeekly, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Qua\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTdWeekly, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Qui\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTdWeekly, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Sex\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTdWeekly, {\n              style: {\n                cursor: 'default'\n              },\n              children: \"Sab\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(C.CalendarioTBody, {\n          children: criarArrayDeDias().map((semana, index) => /*#__PURE__*/_jsxDEV(C.CalendarioTr, {\n            children: semana.map((dia, index) => /*#__PURE__*/_jsxDEV(C.CalendarioTdDay, {\n              onDoubleClick: () => {\n                // verifica se há uma dataSeleciona\n                console.log(\"listDataSelecionada: \", listDataSelecionada);\n                if (listDataSelecionada && listDataSelecionada.length > 0 && convertDate(selectDate) === convertDate(listDataSelecionada[0].eve_dataHora)) {\n                  setCurrentColor(calendarColorGenerator(listDataSelecionada.length));\n                  showTaskInfo();\n                  //console.log(listDataSelecionada.length);\n                }\n              },\n\n              onClick: () => {\n                setCurrentIndx(0);\n                if (dia !== null) {\n                  // objeto para o contrutor de Date interpretar (manter dia +1 para a seleção do dia atual)\n                  const dataSelecionada = `${anoAtual}-${mesAtual}-${dia + 1}`;\n                  // gera a data selecionada pelo usuario                                                \n                  setDataAtual(new Date(dataSelecionada));\n                  handleSelecionarDia(dia, mesAtual, anoAtual);\n                  console.log(\"dataAtual.getTime(): \", dataAtual.getTime());\n                  console.log(\"dataSistema.getTime(): \", dataSistema.getTime());\n\n                  // verificar se a data do sistema é maior que a data selecionada\n                  if (dataAtual.getTime() >= dataSistema.getTime()) showAddTask();else {\n                    closeTaskAdd();\n                    alert(\"Impossivel agendar em uma data passada\");\n\n                    // caso a data seja anterior e haja algum registro\n                    if (listDataSelecionada && listDataSelecionada.length > 0 && convertDate(selectDate) === convertDate(listDataSelecionada[0].eve_dataHora)) showTaskInfo();\n                  }\n                }\n              },\n              style: {\n                ...(dia === null ? {\n                  cursor: 'default'\n                } : {})\n              },\n              children: /*#__PURE__*/_jsxDEV(C.RadiusContent, {\n                day: dia,\n                style: {\n                  // controle da altura do contorno da data\n                  ...(qntSemanas === 5 ? {\n                    height: '67%'\n                  } : {\n                    height: '80%'\n                  }),\n                  // Controle de cores de acordo com a quantidade de atv cadastradas \n                  ...(colorControl.length > 0 ? calendarColorControl(dia, mesAtual, anoAtual) : {}),\n                  // Data selecionada\n                  ...(selectDate && dataAtual.getTime() >= dataSistema.getTime() && dia === selectDate.dia && mesAtual === selectDate.mes && anoAtual === selectDate.ano ? {\n                    background: selectDateColor,\n                    border: '1px solid #fff',\n                    color: '#E7E7E7'\n                  } : {}),\n                  // Data atual\n                  ...(dia !== null && isDiaAtual(dia) ? {\n                    background: currentDateColor,\n                    border: '1px solid #fff'\n                  } : {})\n                },\n                children: dia !== null ? dia : ''\n              }, updateCalendar, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 41\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 37\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 9\n  }, this);\n};\n_s(Calendario, \"xV3ZYFlvJ1jrOsuY/Vz0vfL6NxI=\", false, function () {\n  return [useCalendarContext];\n});\n_c = Calendario;\nexport default Calendario;\nvar _c;\n$RefreshReg$(_c, \"Calendario\");","map":{"version":3,"names":["React","useState","useEffect","C","Axios","useCalendarContext","Title","jsxDEV","_jsxDEV","Calendario","_s","showTaskInfo","showAddTask","listDataSelecionada","setListData","setData","setCalendarUpdt","updateCalendar","closeTaskAdd","setCurrentColor","setCurrentIndx","mesAtual","setMesAtual","Date","getMonth","anoAtual","setAnoAtual","getFullYear","selectDate","setSelectDate","colorControl","setColorControl","qntSemanas","setQntSemanas","dataSistema","setDataSistema","dataAtual","setDataAtual","getCalendarColorControl","numeroDeDias","getDaysInMonth","primeiroDiaSemana","getDay","linhas","Math","ceil","selectDateColor","currentDateColor","nomesDosMeses","proximoMes","mesAnterior","handleSelecionarDia","dia","mes","ano","Promise","resolve","reject","get","params","date","then","response","data","catch","e","console","error","status","request","log","message","helpRequest","alert","setMonth","setDate","getDate","isDiaAtual","diaAtual","mesAtualSelecionado","criarArrayDeDias","dias","linha","semana","diaDaSemana","push","calendarColorControl","repeatedDaysCount","length","updatedColorControl","i","convertDate","eve_dataHora","splice","calendarColorGenerator","color","background","dataString","handlePreviousMonth","handleNextMonth","MainContent","children","CalendarioContainer","TitleContent","Button","position","onClick","fileName","_jsxFileName","lineNumber","columnNumber","CalendarioTable","CalendarioThread","CalendarioTr","CalendarioTdWeekly","style","cursor","CalendarioTBody","map","index","CalendarioTdDay","onDoubleClick","dataSelecionada","getTime","RadiusContent","day","height","border","_c","$RefreshReg$"],"sources":["K:/4 Sem FATEC/goStudent 3.0/GoStudent/client/src/components/Calendario/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as C from './styles';\r\nimport Axios from 'axios';\r\nimport { useCalendarContext } from '../../context/DataContext';\r\nimport Title from '../Title';\r\n\r\nconst Calendario = () => {\r\n    const { showTaskInfo, showAddTask, listDataSelecionada, setListData, setData, setCalendarUpdt, updateCalendar, closeTaskAdd,\r\n        setCurrentColor, setCurrentIndx } = useCalendarContext();\r\n    //setListData({});\r\n    // console.log(\"listDataSelecionada: \", listDataSelecionada);\r\n    // console.log(\"dataSelecionada: \", dataSelecionada);\r\n    // --------------------------------- States ---------------------------------\r\n\r\n    // Pega o dia/ mês atual do sistema\r\n    const [mesAtual, setMesAtual] = useState(new Date().getMonth() + 1);\r\n    const [anoAtual, setAnoAtual] = useState(new Date().getFullYear());\r\n    const [selectDate, setSelectDate] = useState(null);\r\n    const [colorControl, setColorControl] = useState({});\r\n    const [qntSemanas, setQntSemanas] = useState(null);\r\n\r\n    // controle da datas\r\n    const [dataSistema, setDataSistema] = useState(new Date());\r\n    const [dataAtual, setDataAtual] = useState(new Date());\r\n    //console.log(\"qntSemanas: \", qntSemanas);\r\n\r\n    useEffect(() => {\r\n        getCalendarColorControl();\r\n    }, [updateCalendar]);\r\n\r\n    // effect para pegar a quantidade de semanas do mês exibido\r\n    useEffect(() => {\r\n        // pega a quantidade de dias do mes/ ano exibido\r\n        const numeroDeDias = getDaysInMonth(anoAtual, mesAtual);\r\n\r\n        // indica em qual dia da semana o primeiro dia do mês cai (0 para domingo, 1 para segunda-feira, e assim por diante).\r\n        const primeiroDiaSemana = new Date(anoAtual, mesAtual - 1, 1).getDay();\r\n\r\n        // numero de semanas do mes atual\r\n        const linhas = Math.ceil((numeroDeDias + primeiroDiaSemana) / 7);\r\n\r\n        setQntSemanas(linhas);\r\n    }, [anoAtual, mesAtual]);\r\n\r\n    // --------------------------------- Variaveis estaticas de controle ---------------------------------\r\n    // Cores de selação da data\r\n    const selectDateColor = '#3282B8';\r\n    const currentDateColor = 'rgb(66, 135, 245, 0.4)';\r\n\r\n    // Array para controle do titulo\r\n    // Varia de acordo com o mesAtual\r\n    const nomesDosMeses = [\r\n        'Janeiro',\r\n        'Fevereiro',\r\n        'Março',\r\n        'Abril',\r\n        'Maio',\r\n        'Junho',\r\n        'Julho',\r\n        'Agosto',\r\n        'Setembro',\r\n        'Outubro',\r\n        'Novembro',\r\n        'Dezembro',\r\n    ];\r\n    // --------------------------------- Funções de interação ---------------------------------\r\n\r\n    // Função do botão prixmo mês\r\n    const proximoMes = () => {\r\n        if (mesAtual === 12) { //Verifica se o mês atual do calendario é Dezembro\r\n            setMesAtual(1); //Se for volta para o mês 1 e avança +1 no anoAtual\r\n            setAnoAtual(anoAtual + 1);\r\n        } else {\r\n            setMesAtual(mesAtual + 1);\r\n        }\r\n    };\r\n    // Função do botão prixmo mês\r\n    const mesAnterior = () => {\r\n        if (mesAtual === 1) { //Verifica se o mês atual do calendario é Janeiro\r\n            setMesAtual(12); //Se for volta para o mês 12 e recua -1 no anoAtual\r\n            setAnoAtual(anoAtual - 1);\r\n        } else {\r\n            setMesAtual(mesAtual - 1);\r\n        }\r\n    };\r\n\r\n    // Função para lidar com a seleção de um dia\r\n    const handleSelecionarDia = (dia, mes, ano) => {\r\n        return new Promise((resolve, reject) => {\r\n            setSelectDate({ dia, mes, ano });\r\n            setData(`${ano}/${mes}/${dia}`);\r\n\r\n            Axios.get(\"http://localhost:3001/getDateData\", {\r\n                params: {\r\n                    date: `${ano}/${mes}/${dia}`,\r\n                },\r\n            })\r\n                .then((response) => {\r\n                    setListData(response.data);\r\n                    resolve(); // Resolvendo a Promise após setListData ser executado\r\n                })\r\n                .catch((e) => {\r\n                    // tratamento de erro 'requests, response e configuração'\r\n                    if (e.response) {\r\n                        console.error(\"--erro status:\", e.response.status);\r\n                        console.error(\"--dados do erro:\", e.response.data);\r\n                    } else if (e.request) {\r\n                        // requisição feita, mas não houve resposta do servidor\r\n                        console.log(\"Sem resposta do servidor:\", e.request);\r\n                    } else {\r\n                        // erro ao configurar a requisição\r\n                        console.error(\"--erro requisição:\", e.message);\r\n                    }\r\n                    reject(e); // Rejeitando a Promise em caso de erro na requisição\r\n                });\r\n        });\r\n    };\r\n\r\n    const helpRequest = () => {\r\n        alert(\"Desenvolver pagina de ajuda\")\r\n    }\r\n\r\n    // --------------------------------- Funções principais ---------------------------------\r\n    // Função responsavel por retornar a quantidade de dias de um determinado (ano, mês) sendo passado por parametro\r\n    // Cada mês tem sua quantidade de dias\r\n    const getDaysInMonth = (ano, mes) => {\r\n        const date = new Date(ano, mes - 1, 1); //Pega o primeiro dia do mes (ex: 1/9/2023 : outubro)\r\n        date.setMonth(date.getMonth() + 1); //Avança um mês (soma + 1 no mês, ex: 1/10/2023)\r\n        date.setDate(date.getDate() - 1); //Volta um dia para pegar o ultimo dia do mes (ex: 31/9/2023)\r\n        return date.getDate(); // Retorna apenas o dia\r\n    };\r\n\r\n    // Variaveis de controle de calendario\r\n    const numeroDeDias = getDaysInMonth(anoAtual, mesAtual); // Chama a função getDaysInMonth para pegar quantos dias a no mês\r\n    const primeiroDiaSemana = new Date(anoAtual, mesAtual - 1, 1).getDay(); // Armazena o dia da semana em que o mês começa (0 para domingo, 1 para segunda, etc.).\r\n    const linhas = Math.ceil((numeroDeDias + primeiroDiaSemana) / 7); // Calcula a quantidade de linhas para o calendario (ex: numeroDeDias=30 + primeiroDiaSemana=4 / 7'dias da semana')\r\n\r\n    // Função que verifica se o dia atual é igual ao dia que está sendo montado no calendario\r\n    const isDiaAtual = (dia) => {\r\n        const dataAtual = new Date(); // Pega o calendario do sistema\r\n        const diaAtual = dataAtual.getDate(); // Pega o dia atual do calendario\r\n        const mesAtualSelecionado = dataAtual.getMonth() + 1; // Pega o mês atual do sistema\r\n        return dia === diaAtual && mesAtual === mesAtualSelecionado; // Compara o dia que está sendo montado com o dia atual, mesma coisa para o mes (retorna um boolean)\r\n    };\r\n\r\n    // Função para criar um array bidimensional para representar os dias do calendario    \r\n    const criarArrayDeDias = () => {\r\n        const dias = []; // Array que vai armazenar os dias do calendario\r\n        for (let linha = 0; linha < linhas; linha++) { // Loop para percorrer as linhas do calendario calculada anteriormente (Quntidade de semanas do mês)\r\n            const semana = []; // Para cada linha, criamos um array vazio para representar os dias dessa semana\r\n            for (let diaDaSemana = 0; diaDaSemana < 7; diaDaSemana++) { // Loop para percorrer os dias da semana (0 a 6, representando domingo a sábado)\r\n                const dia = linha * 7 + diaDaSemana - primeiroDiaSemana + 1; // Calculo do valor do dia atual (pode ser um valor positivo representando o dia do mês, ou null se estivermos antes do início do mês ou após o final do mês)\r\n                semana.push(dia > 0 && dia <= numeroDeDias ? dia : null); // Monta o array com os dias calculados (de domingo a sabado) \r\n            }\r\n            dias.push(semana);\r\n            // Monta o array dia com os dias da array da semana  ex: \r\n            // [null, null, 1, 2, 3, 4, 5], // Primeira semana\r\n            // [6, 7, 8, 9, 10, 11, 12],   // Segunda semana\r\n            // [13, 14, 15, 16, 17, 18, 19],  // Terceira semana\r\n            // [20, 21, 22, 23, 24, 25, 26],  // Quarta semana\r\n            // [27, 28, 29, 30, null, null, null]  // Quinta semana)            \r\n        }\r\n        return dias;\r\n    };\r\n\r\n    const getCalendarColorControl = () => {\r\n        Axios.get(\"http://localhost:3001/testData\", {\r\n        }).then((response) => {\r\n            setColorControl(response.data);\r\n        }).catch((e) => {\r\n            // tratamento de erro 'requests, response e configuração'\r\n            if (e.response) {\r\n                console.error(\"--erro status:\", e.response.status);\r\n                console.error(\"--dados do erro:\", e.response.data);\r\n            } else if (e.request) {\r\n                // requisição feita, mas não houve resposta do servidor\r\n                console.log(\"Sem resposta do servidor:\", e.request);\r\n            } else {\r\n                // erro ao configurar a requisição\r\n                console.error(\"--erro requisição:\", e.message);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    const calendarColorControl = (dia, mes, ano) => {\r\n        let repeatedDaysCount = 0;\r\n        const dataAtual = dia ? dia + \"/\" + mes + \"/\" + ano : null;\r\n\r\n        // Verificar se se colorControl recebeu retorno do banco e seu length é > 0\r\n        if (colorControl.length > 0 && dataAtual) {\r\n            let updatedColorControl = [...colorControl]; // Cria uma cópia do estado colorControl\r\n\r\n            // Laço para ver quantas vezes a data se repete no retorno do banco\r\n            for (let i = 0; i <= updatedColorControl.length - 1; i++) {\r\n                if (convertDate(updatedColorControl[i].eve_dataHora) === dataAtual) {\r\n                    repeatedDaysCount++;\r\n                    updatedColorControl.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n        return calendarColorGenerator(repeatedDaysCount);\r\n    }\r\n\r\n    const calendarColorGenerator = (repeatedDaysCount) => {\r\n        let color = 'rgb(242, 41, 59';\r\n        switch (repeatedDaysCount) {\r\n            case 1:\r\n                return { background: color + ', 0.2)' };\r\n            case 2:\r\n                return { background: color + ', 0.5)' };\r\n            case 3:\r\n                return { background: color + ', 0.7)' };\r\n            default:\r\n                return repeatedDaysCount < 1 ? {} : { background: color + ', 0.9)' };\r\n        }\r\n    }\r\n\r\n    const convertDate = (date) => {\r\n        let data = \"\";\r\n\r\n        if (typeof date === 'object') {\r\n            const { dia, mes, ano } = date;\r\n            data = new Date(`${ano}/${mes}/${dia}`);\r\n\r\n        } else\r\n            data = new Date(date);\r\n\r\n        const dia = data.getDate(); // Obter o ano como dia\r\n        const mes = data.getMonth() + 1; // Mês (lembrando que Janeiro começa do zero)\r\n        const ano = data.getFullYear(); // Obter o dia como ano\r\n\r\n        // Formatar para o padrão dd/mm/yyyy\r\n        const dataString = `${dia}/${mes}/${ano}`;\r\n\r\n        //console.log(\"convertDate: \" + dataString);\r\n        return dataString;\r\n    }\r\n\r\n    const handlePreviousMonth = () => {\r\n        mesAnterior();\r\n        setCalendarUpdt();\r\n        // getCalendarColorControl();        \r\n    }\r\n\r\n    const handleNextMonth = () => {\r\n        proximoMes();\r\n        setCalendarUpdt();\r\n        // getCalendarColorControl();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <C.MainContent>\r\n            <C.CalendarioContainer>\r\n                <C.TitleContent>\r\n                    <C.Button position='left' onClick={handlePreviousMonth}>&lt;</C.Button>\r\n                    <C.Title>{`${nomesDosMeses[mesAtual - 1]}  ${anoAtual}`}</C.Title>\r\n                    <C.Button position='right' onClick={handleNextMonth}>&gt;</C.Button>\r\n                </C.TitleContent>\r\n\r\n                <C.CalendarioTable>\r\n                    <C.CalendarioThread>\r\n                        <C.CalendarioTr>\r\n                            <C.CalendarioTdWeekly style={{ cursor: 'default' }}>Dom</C.CalendarioTdWeekly>\r\n                            <C.CalendarioTdWeekly style={{ cursor: 'default' }}>Seg</C.CalendarioTdWeekly>\r\n                            <C.CalendarioTdWeekly style={{ cursor: 'default' }}>Ter</C.CalendarioTdWeekly>\r\n                            <C.CalendarioTdWeekly style={{ cursor: 'default' }}>Qua</C.CalendarioTdWeekly>\r\n                            <C.CalendarioTdWeekly style={{ cursor: 'default' }}>Qui</C.CalendarioTdWeekly>\r\n                            <C.CalendarioTdWeekly style={{ cursor: 'default' }}>Sex</C.CalendarioTdWeekly>\r\n                            <C.CalendarioTdWeekly style={{ cursor: 'default' }}>Sab</C.CalendarioTdWeekly>\r\n                        </C.CalendarioTr>\r\n                    </C.CalendarioThread>\r\n                    <C.CalendarioTBody>\r\n                        {criarArrayDeDias().map((semana, index) => (\r\n                            <C.CalendarioTr key={index}>\r\n                                {semana.map((dia, index) => (\r\n                                    <C.CalendarioTdDay\r\n                                        key={index}\r\n                                        onDoubleClick={() => {\r\n                                            // verifica se há uma dataSeleciona\r\n                                            console.log(\"listDataSelecionada: \", listDataSelecionada);\r\n                                            if (listDataSelecionada && listDataSelecionada.length > 0 && convertDate(selectDate) === convertDate(listDataSelecionada[0].eve_dataHora)) {\r\n                                                setCurrentColor(calendarColorGenerator(listDataSelecionada.length));\r\n                                                showTaskInfo();\r\n                                                //console.log(listDataSelecionada.length);\r\n                                            }\r\n                                        }}\r\n                                        onClick={() => {\r\n                                            setCurrentIndx(0);\r\n                                            if (dia !== null) {\r\n                                                // objeto para o contrutor de Date interpretar (manter dia +1 para a seleção do dia atual)\r\n                                                const dataSelecionada = `${anoAtual}-${mesAtual}-${dia + 1}`;\r\n                                                // gera a data selecionada pelo usuario                                                \r\n                                                setDataAtual(new Date(dataSelecionada));\r\n\r\n                                                handleSelecionarDia(dia, mesAtual, anoAtual);\r\n\r\n                                                console.log(\"dataAtual.getTime(): \", dataAtual.getTime());\r\n                                                console.log(\"dataSistema.getTime(): \", dataSistema.getTime());\r\n\r\n                                                // verificar se a data do sistema é maior que a data selecionada\r\n                                                if (dataAtual.getTime() >= dataSistema.getTime())\r\n                                                    showAddTask();\r\n                                                else {\r\n                                                    closeTaskAdd();\r\n                                                    alert(\"Impossivel agendar em uma data passada\");\r\n\r\n                                                    // caso a data seja anterior e haja algum registro\r\n                                                    if (listDataSelecionada && listDataSelecionada.length > 0 && convertDate(selectDate) === convertDate(listDataSelecionada[0].eve_dataHora))\r\n                                                        showTaskInfo();\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                        style={{\r\n                                            ...dia === null ? { cursor: 'default' } : {}\r\n                                        }}\r\n                                    >\r\n                                        <C.RadiusContent\r\n                                            key={updateCalendar}\r\n                                            day={dia}\r\n                                            style={{\r\n                                                // controle da altura do contorno da data\r\n                                                ...(qntSemanas === 5) ? { height: '67%' } : { height: '80%' },\r\n                                                // Controle de cores de acordo com a quantidade de atv cadastradas \r\n                                                ...colorControl.length > 0 ? calendarColorControl(dia, mesAtual, anoAtual) : {},\r\n                                                // Data selecionada\r\n                                                ...(selectDate && dataAtual.getTime() >= dataSistema.getTime() && dia === selectDate.dia && mesAtual === selectDate.mes && anoAtual === selectDate.ano\r\n                                                    ? { background: selectDateColor, border: '1px solid #fff', color: '#E7E7E7' } : {}),\r\n                                                // Data atual\r\n                                                ...dia !== null && isDiaAtual(dia) ? { background: currentDateColor, border: '1px solid #fff' } : {}\r\n                                            }}>\r\n                                            {dia !== null ? dia : ''}\r\n                                        </C.RadiusContent>\r\n                                    </C.CalendarioTdDay>\r\n                                ))}\r\n                            </C.CalendarioTr>\r\n                        ))}\r\n                    </C.CalendarioTBody>\r\n                </C.CalendarioTable>\r\n            </C.CalendarioContainer>\r\n        </C.MainContent>\r\n    );\r\n};\r\n\r\nexport default Calendario;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}